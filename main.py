import asyncio
import os
import tempfile
from dataclasses import dataclass, field
from typing import Deque, Optional, List
from collections import deque


import discord
from discord import app_commands
from discord.ext import commands


from telethon import TelegramClient
from telethon.tl.types import MessageMediaDocument
from telethon.errors import UsernameNotOccupiedError
from dotenv import load_dotenv

load_dotenv()

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
TELEGRAM_API_ID = int(os.getenv("TELEGRAM_API_ID", "0"))
TELEGRAM_API_HASH = os.getenv("TELEGRAM_API_HASH")
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: @my_music_channel
TEMP_DIR = os.getenv("TEMP_DIR", ".cache")

if not all([DISCORD_TOKEN, TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_CHANNEL]):
    raise RuntimeError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ DISCORD_TOKEN, TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_CHANNEL –≤ .env")

os.makedirs(TEMP_DIR, exist_ok=True)
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# --- Telegram client (–æ–¥–∏–Ω –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å) ---
tele_client = TelegramClient("tg_session", TELEGRAM_API_ID, TELEGRAM_API_HASH)

# --- –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–≥–∏–ª—å–¥–∏—é) ---
@dataclass
class Track:
    title: str
    filepath: str
    source_msg_id: int

@dataclass
class GuildPlayer:
    voice: Optional[discord.VoiceClient] = None
    queue: Deque[Track] = field(default_factory=deque)
    now_playing: Optional[Track] = None
    play_lock: asyncio.Lock = field(default_factory=asyncio.Lock)

players: dict[int, GuildPlayer] = {}

SUPPORTED_AUDIO_MIME_PREFIXES = ("audio/",)
SUPPORTED_EXTS = {".mp3", ".m4a", ".ogg", ".flac", ".wav"}



async def ensure_player(guild: discord.Guild) -> GuildPlayer:
    if guild.id not in players:
        players[guild.id] = GuildPlayer()
    return players[guild.id]

async def get_tg_entity():
    chan = (TELEGRAM_CHANNEL or "").strip()
    if not chan:
        raise RuntimeError("TELEGRAM_CHANNEL –ø—É—Å—Ç")
    try:
        # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç @username –ò –ø–æ–ª–Ω—ã–µ t.me-—Å—Å—ã–ª–∫–∏ (–≤–∫–ª—é—á–∞—è invite)
        return await tele_client.get_entity(chan)
    except Exception as e:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ TELEGRAM_CHANNEL='{chan}': {e}")

# –∏ –≤ search_telegram_audios –∑–∞–º–µ–Ω–∏—Ç–µ:
# entity = await tele_client.get_entity(TELEGRAM_CHANNEL)


async def connect_to_author_channel(interaction: discord.Interaction) -> discord.VoiceClient:
    if not interaction.user or not isinstance(interaction.user, discord.Member):
        raise RuntimeError("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞")
    voice_state = interaction.user.voice
    if not voice_state or not voice_state.channel:
        raise RuntimeError("–ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –∫–æ–º–∞–Ω–¥—ã")
    player = await ensure_player(interaction.guild)
    if player.voice and player.voice.is_connected():
        if player.voice.channel.id != voice_state.channel.id:
            await player.voice.move_to(voice_state.channel)
    else:
        player.voice = await voice_state.channel.connect(self_deaf=True)
    return player.voice

async def search_telegram_audios(query: Optional[str], limit: int = 20):
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏-–∞—É–¥–∏–æ
    try:
        entity = await get_tg_entity()   # <-- –í–´–ó–û–í –¢–£–¢, –≤–Ω—É—Ç—Ä–∏ async-—Ñ—É–Ω–∫—Ü–∏–∏
    except Exception as e:
        raise RuntimeError(str(e))

    results = []
    async for msg in tele_client.iter_messages(entity, search=query or None, limit=200):
        if isinstance(msg.media, MessageMediaDocument) and msg.file:
            mime = getattr(msg.file, "mime_type", "") or ""
            name = msg.file.name or f"audio_{msg.id}"
            ext = os.path.splitext(name)[1].lower()
            if mime.startswith(SUPPORTED_AUDIO_MIME_PREFIXES) or ext in SUPPORTED_EXTS:
                title = (msg.message or name).strip()[:200] if msg.message else name
                results.append((msg, title))
                if len(results) >= limit:
                    break
    return results

async def download_audio(msg, title: str) -> str:
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤ TEMP_DIR —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º
    safe = "".join(c for c in title if c.isalnum() or c in " _-()[]{}.,!")
    base = safe or f"audio_{msg.id}"
    tmp_path = os.path.join(TEMP_DIR, f"{base}_{msg.id}")
    path = await tele_client.download_media(msg, file=tmp_path)
    return path

async def play_next(guild: discord.Guild):
    player = await ensure_player(guild)
    if not player.voice or not player.voice.is_connected():
        return
    if player.voice.is_playing() or player.voice.is_paused():
        return
    if not player.queue:
        player.now_playing = None
        return

    track = player.queue.popleft()
    player.now_playing = track

    def after_play(err):
        if err:
            print(f"FFmpeg error: {err}")
        fut = asyncio.run_coroutine_threadsafe(play_next(guild), bot.loop)
        try:
            fut.result()
        except Exception as e:
            print("play_next error:", e)

    source = discord.FFmpegPCMAudio(track.filepath, before_options="-nostdin", options="-vn")
    player.voice.play(source, after=after_play)

# --- –°–õ–≠–®-–ö–û–ú–ê–ù–î–´ ---

@tree.command(description="–ó–∞–π—Ç–∏ –≤ –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
async def join(interaction: discord.Interaction):
    try:
        vc = await connect_to_author_channel(interaction)
        await interaction.response.send_message(f"–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫: **{vc.channel.name}**")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå {e}", ephemeral=True)

@tree.command(description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
@app_commands.describe(query="–ù–∞–∑–≤–∞–Ω–∏–µ/—Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ Telegram")
async def play(interaction: discord.Interaction, query: str):
    await interaction.response.defer(thinking=True)
    try:
        await connect_to_author_channel(interaction)
        player = await ensure_player(interaction.guild)
        async with player.play_lock:
            found = await search_telegram_audios(query, limit=1)
            if not found:
                await interaction.followup.send("–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ –≤ –∫–∞–Ω–∞–ª–µ Telegram ü§∑‚Äç‚ôÇÔ∏è")
                return
            msg, title = found[0]
            path = await download_audio(msg, title)
            track = Track(title=title, filepath=path, source_msg_id=msg.id)
            player.queue.append(track)
            await interaction.followup.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **{track.title}**")
            await play_next(interaction.guild)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@tree.command(description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç—Ä–µ–∫–æ–≤ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞")
@app_commands.describe(n="–°–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)")
async def latest(interaction: discord.Interaction, n: Optional[int] = 10):
    await interaction.response.defer(thinking=True)
    try:
        results = await search_telegram_audios(None, limit=n or 10)
        if not results:
            await interaction.followup.send("–í –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ")
            return
        lines = []
        for msg, title in results:
            ext = os.path.splitext(msg.file.name or "")[1] if msg.file else ""
            size_mb = (msg.file.size or 0) / (1024 * 1024) if msg.file else 0
            lines.append(f"‚Ä¢ **{title}** {ext} ‚Äî {size_mb:.1f} MB (id: `{msg.id}`)")
        await interaction.followup.send("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞—É–¥–∏–æ:\n" + "\n".join(lines))
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@tree.command(description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
async def queue(interaction: discord.Interaction):
    player = await ensure_player(interaction.guild)
    parts = []
    if player.now_playing:
        parts.append(f"‚ñ∂Ô∏è –°–µ–π—á–∞—Å: **{player.now_playing.title}**")
    if player.queue:
        for i, t in enumerate(list(player.queue)[:20], 1):
            parts.append(f"{i}. {t.title}")
    if not parts:
        parts.append("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
    await interaction.response.send_message("\n".join(parts))

@tree.command(description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip(interaction: discord.Interaction):
    player = await ensure_player(interaction.guild)
    if player.voice and player.voice.is_playing():
        player.voice.stop()
        await interaction.response.send_message("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏–ª")
    else:
        await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")

@tree.command(description="–ü–∞—É–∑–∞")
async def pause(interaction: discord.Interaction):
    player = await ensure_player(interaction.guild)
    if player.voice and player.voice.is_playing():
        player.voice.pause()
        await interaction.response.send_message("‚è∏Ô∏è –ü–∞—É–∑–∞")
    else:
        await interaction.response.send_message("–ù–µ—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É")

@tree.command(description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def resume(interaction: discord.Interaction):
    player = await ensure_player(interaction.guild)
    if player.voice and player.voice.is_paused():
        player.voice.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é")
    else:
        await interaction.response.send_message("–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å")

@tree.command(description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def stop(interaction: discord.Interaction):
    player = await ensure_player(interaction.guild)
    player.queue.clear()
    if player.voice and (player.voice.is_playing() or player.voice.is_paused()):
        player.voice.stop()
    await interaction.response.send_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏–ª –∏ –æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å")

async def debug_telegram_startup_check():
    print("=== TELETHON DEBUG START ===")
    print("TELEGRAM_CHANNEL =", repr(TELEGRAM_CHANNEL))

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ Telethon
    if not tele_client.is_connected():
        print("Telethon: not connected ‚Äî connecting...")
        await tele_client.connect()

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–Ω—É–∂–Ω–æ login —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä)
    if not await tele_client.is_user_authorized():
        print("‚ùå Telethon –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä!")
        print("=== TELETHON DEBUG END ===")
        return
    else:
        me = await tele_client.get_me()
        print(f"‚úÖ Telethon –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username}) id={me.id}")

    # 3) –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
    try:
        entity = await get_tg_entity()
        print(f"‚úÖ –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: id={entity.id}, title='{getattr(entity,'title',None)}'")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", e)

    print("=== TELETHON DEBUG END ===")

@bot.event
async def on_ready():
    # –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if not tele_client.is_connected():
        # start() –∑–∞–ø—É—Å—Ç–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ–≥–∏–Ω, –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç
        await tele_client.start()
    try:
        await tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è {bot.user}")
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:", e)
    print(f"–ì–æ—Ç–æ–≤–æ: {bot.user} (ID: {bot.user.id})")

async def main():
    async with bot:
        await bot.start(DISCORD_TOKEN)

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
    async def run():
        await tele_client.start()
        await main()
    try:
        asyncio.run(run())
    finally:
        if tele_client.is_connected():
            asyncio.run(tele_client.disconnect())